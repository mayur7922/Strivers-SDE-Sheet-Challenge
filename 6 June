17) Unique Paths

code:

#include <bits/stdc++.h> 

int solve(vector<vector<int>> &dp, int i, int j, int m, int n){

	if(i == m || j == n) return 0;
	if(i == m-1 && j == n-1) return 1;

	if(dp[i][j] != -1) return dp[i][j];
	int l = 0, r = 0;

	if(dp[i+1][j] != -1) l = dp[i+1][j];
	else{
		dp[i+1][j] = solve(dp,i+1,j,m,n);
		l = dp[i+1][j];
	}

	if(dp[i][j+1] != -1) r = dp[i][j+1];
	else{
		dp[i][j+1] = solve(dp,i,j+1,m,n);
		r = dp[i][j+1];
	}

	return dp[i][j] = l+r;
}

int uniquePaths(int m, int n) {
	// Write your code here.
	vector<vector<int>> dp(m+1,vector<int> (n+1,-1));
	return solve(dp,0,0,m,n);
}

5) sort 0 1 2

Code:

#include <bits/stdc++.h> 
void sort012(int *arr, int n)
{
   //   Write your code here
   int t1 = -1;
   for(int i=0; i<n; i++){
      if(arr[i] == 0){
         t1++;
         swap(arr[t1],arr[i]);
      }
   }

   int t2 = n;
   for(int i=n; i>=0; i--){
      if(arr[i] == 2){
         t2--;
         swap(arr[i],arr[t2]);
      }
   }
}
