27) Merge two linked list

Code:

#include <bits/stdc++.h>

/************************************************************

    Following is the linked list node structure.
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }

        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
    };

************************************************************/

Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    // Write your code here.
    Node<int>* fnode=first;
    Node<int>* snode=second;
    Node<int>* ans=new Node<int>(0);
    Node<int>* node=ans;

    while(fnode != NULL && snode != NULL){
        if(fnode->data < snode->data){
            int val = fnode->data;
            Node<int>* n=new Node<int>(val);
            ans->next=n;
            ans=n;
            if(fnode->next == NULL) fnode = NULL;
            else fnode = fnode->next;
        }
        else{
            int val = snode->data;
            Node<int>* n=new Node<int>(val);
            ans->next=n;
            ans=n;
            if(snode->next == NULL) snode = NULL;
            else snode = snode->next;
        }
    }

    if(fnode == NULL){
        while(snode != NULL){
            int val=snode->data;
            Node<int>* n=new Node<int>(val);
            ans->next=n;
            ans=n;
            if(snode->next == NULL) snode = NULL;
            else snode = snode->next;
        }
    }

    if(snode == NULL){
        while(fnode != NULL){
            int val=fnode->data;
            Node<int>* n=new Node<int>(val);
            ans->next=n;
            ans=n;
            if(fnode->next == NULL) fnode = NULL;
            else fnode = fnode->next;
        }
    }

    return node->next;
}
